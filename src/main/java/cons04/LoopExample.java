package cons04;

import java.util.List;

public class LoopExample {
   public static void main(String[] args) {
      List<Integer> list = List.of(1, 2, 3, 4, 5);

      for (Integer element : list) {
         System.out.println("element = " + element);

         System.out.println("==================");

         list.forEach(element2 -> System.out.println("element = " + element2));

         System.out.println("=================");
         list.forEach(System.out::println);
      }
   }
}

/**
 * Традиционное программирование подразумевает такой подход
 * ○ есть функции,
 * ○ в которые передаются данные
 * ○ т.е. мы манипулируем данными
 * ● Функциональное программирование подразумевает
 * ○ есть неизменяемые данные,
 * ○ над которыми работают функции, передаваемые как
 * параметры
 * ○ т.е. мы манипулируем набором функций
 * ● Лямбда-выражения - компактный способ передать поведение из
 * одного места программы в другое
 */

/**
 * Правила для лямбда-выражений
 * ● Указывать тип параметров не обязательно - компилятор получает
 * их из контекста
 * ● Если параметров нет, то следует использовать пустые круглые
 * скобки
 * ● Если параметр один, то указывать скобки не требуется
 * ● ƛ-выражение может состоять из нескольких операторов
 * ● Если тело состоит из одного оператора, то:
 * ○ фигурные скобки не нужны
 * ○ можно опустить оператор return
 */

/**
 * Примеры:
 * (x, y) -> {x++; y--; return x + y;}
 * x -> x * x
 * () -> System.out.println(“Лямбда, привет!”)
 */