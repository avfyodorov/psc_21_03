package cons03.examples;

public class ThrowsAnyLevels {

   public static void functionA() {
      System. out.println("functionA старт");
      functionB();
      System. out.println("functionA финиш");
   }

   public static void functionB() {
      System. out.println("functionB старт");
      functionC();
      System. out.println("functionB финиш");
   }

   public static void functionC() {
      System. out.println("functionC старт");
      int x = 1/0;
      System. out.println("functionC финиш");
   }

   public static void main(String[] args) {
      try {
         functionA();
      } catch (Exception e) {
         System. out.println(e);
      }
   }
}
/*

Проверяемые и непроверяемые исключения
● Проверяемое исключение – компилятор проверяет (требует)
наличие блока try catch (или наличия throws в сигнатуре), если в коде
есть вызов функции, способной генерировать такое исключение
● Остальные - непроверяемые (потомки Error и RuntimeException)
==============
Зачем нужны проверяемые исключения?
● Они способствуют написанию правильных программ
● Классы ошибок (Errors) не включены в проверяемые исключения,
поскольку эти ошибки, обычно, фатальны. И у программиста нет
возможности устранить их. А значит и обрабатывать незачем
● Классы наследники RuntimeException не включены в проверяемые
исключения, поскольку, с точки зрения разработчиков Java, их
принудительная обработка скажется на правильности программ
несущественно. С другой стороны, выявление на этапе компиляции
мест в коде где исключение во время исполнения программы НЕ
может произойти, крайне затруднительно, даже если для
программиста это очевидно.
===========================

   Где следует обрабатывать исключения?
        ● Перехватывать веде, а  обрабатывать исключения следует на верхнем
        уровне приложения, то есть как можно ближе к поль зователю
        ● В библиотеках и повторно используемом коде лучше сделать
        проброс исключения, а не пытаться выполнить их обработку
        ● При написании библиотеки иногда имеет смысл делать трансляцию
        исключений (exception translation) - превращать специфичные для
        задачи исключения (обычно проверяемые), в стандартное или в
        обобщённое непроверяемое исключение
============================
Проброс исключений: throws
● Ключевое слово throws (проброс) является частью определения метода
● Проброс требуется только для проверяемых (checked) исключений и
только в случаях если есть операторы метода, которые могут
генерировать такое исключение и эти операторы не обрамлены
конструкцией try-catch по данным исключениям, а также при
переопределения метода, который пробрасывает исключения
● Непроверяемые исключения пробрасываются и так, без указания
ключевого слова throws
● Использование пробросов часто является хорошим стилем
программирования, поскольку позволяет перенести обработку
исключений ближе к пользователю, который
может знать причину возникновения данного
исключения и способы исправления ситуации

*/